{"version":3,"sources":["components/loading-arrow.gif","Context.js","components/SingleRoom.js","components/Single.js","components/Home.js","components/Singledetail.js","components/Spinner.js","components/Detail.js","components/AllCountry.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","myContext","React","createContext","ContextPro","state","Alldata","fetch","then","res","json","data","setState","countryitems","Provider","value","this","props","children","Component","SingleRoom","title","code","total_cases","total_active_cases","total_deaths","total_new_cases_today","total_new_deaths_today","total_recovered","total_serious_cases","className","to","Single","Singledata","datas","dats","Object","values","map","dat","Home","context","index","key","contextType","Singledetail","detail","Spinner","src","gifload","alt","Detail","id","match","params","countrydata","length","roomDetails","dets","AllCountry","alldata","results","catch","err","console","log","alldatum","datum","total_affected_countries","btn-primary","App","Context","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0375d8ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading-arrow.e9ea7394.gif\";","import React, { Component } from 'react'\n\nexport const myContext = React.createContext()\n\nclass ContextPro extends Component {\n\n\nstate={\n\n    Alldata:[]\n}\n\ncomponentDidMount()\n{\n    const url = 'https://api.thevirustracker.com/free-api?countryTotals=ALL';    \n    fetch(url)\n    .then(res=>{\n       const re = res.json();\n       return re;\n    })\n    .then(data=>{\n        \n        this.setState({\n            Alldata:data.countryitems\n        })\n    })\n        \n}\n\n\n    render() {\n        return (\n            <myContext.Provider value={this.state}>\n                {this.props.children}\n            </myContext.Provider>\n        )\n    }\n}\n\nexport default ContextPro\n","import React, { Component } from 'react'\nimport App from '../App.css'\nimport {BrowserRouter as Router,Link,Switch,Route} from 'react-router-dom'\n\n\n\nclass SingleRoom extends Component {\n    render() {\nconst {data} = this.props\n\n\n const {title,code,total_cases,total_active_cases,\n total_deaths,total_new_cases_today,total_new_deaths_today,total_recovered,total_serious_cases} = data\n\n\n\n\n        return (\n            <div className=\"singlecountry\">\n                    <h1>Country : {title}</h1>\n               \n                    <h2>\n                        <Link to={`detail/${code}`} className=\"btn-primary\">Show Details</Link>\n                    </h2>\n\n            </div>\n        )\n    }\n}\n\n\nexport default SingleRoom","import React, { Component } from 'react'\nimport App from '../App.css'\nimport SingleRoom from './SingleRoom'\n\nclass Single extends Component {\n\n    state={\n        Singledata:[]\n    }\n\n    \n\n    render() {\n\n       const {datas} =  this.props\n       let datavalues = Object.values(datas)\n        let dats = datavalues.map(dat=>{\n            return <SingleRoom data={dat}/>\n            \n        })\n\n        // console.log(dats)\n        return (\n            <div className=\"items\">\n             {dats}\n\n            </div>\n        )\n    }\n}\n\n\nexport default  Single\n\n\n\n\n\n\n","import React, { Component } from 'react'\nimport {myContext} from '../Context'\nimport Single from './Single'\nimport {BrowserRouter as Router,Link,Switch,Route} from 'react-router-dom'\n\n\nclass Home extends Component {\n    static contextType = myContext\n    render() {\n        const {Alldata} = this.context\n       \n        return (\n            <div className=\"inner-section\">\n              <h3>  <Link to={`/`} className=\"btn-primary\">Go Back</Link></h3>\n             {Alldata.map((data,index)=>{\n                 return <Single key={index} datas={data}/>\n             })}\n            \n            </div>\n        )\n    }\n}\n\nexport default Home\n","import React from 'react'\nimport {BrowserRouter as Router,Link,Switch,Route} from 'react-router-dom'\n\n\nexport default function Singledetail({detail}) {\n\n    const {total_cases,total_active_cases,total_deaths,total_new_cases_today,\n        total_new_deaths_today,total_recovered,total_serious_cases} = detail\n    return (\n        <div className=\"alldetail\">\n                <div className=\"innerdetail\">\n                    <p>Total cases: {total_cases}</p>\n                    \n                    <p>Total active cases: {total_active_cases}</p>\n                    <p>Total death: {total_deaths}</p>\n                    <p>Case today: {total_new_cases_today}</p>\n                    <p>Death today: {total_new_deaths_today}</p>\n                    <p>Recovered: {total_recovered}</p>\n                    <p>Serious: {total_serious_cases}</p>\n\n                    <h1>\n                        <Link to={\"/detail\"} className=\"btn-primary\">\n                        Go Back\n                        </Link>\n                    </h1>\n                </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport App from '../App.css'\n\nimport gifload from './loading-arrow.gif'\n\nexport default function Spinner() {\n    return (\n        <div className=\"spinnerload\">\n            <img src={gifload} alt=\"\"/>\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport Singledetail from './Singledetail'\nimport Spinner from './Spinner'\nexport default class Detail extends Component {\n\nstate={\n    detail:[]\n}\n\n        componentDidMount()\n        {\n            let id = this.props.match.params.code\n            // console.log(id)\n            fetch(`https://api.thevirustracker.com/free-api?countryTotal=${id}`)\n            .then(res=>res.json())\n            .then(data=>{\n                this.setState({\n                    detail:data.countrydata\n                })\n            })\n        }\n\n    \n\n\n    render() {\n        if(this.state.detail.length === 0){\n            return <Spinner/>\n        }\n        let roomDetails = this.state.detail.map(dets=>{\n            return <Singledetail detail = {dets}/>\n        })\n       \n        return (\n            <div>\n               {roomDetails}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport {BrowserRouter as Router,Link,Switch,Route} from 'react-router-dom'\n\nexport default class AllCountry extends Component {\n\n    state={\n        alldata:[]\n    }\n\n    componentDidMount()\n    {\n        fetch('https://api.thevirustracker.com/free-api?global=stats')\n        .then(res=>res.json())\n        .then(data=>{\n            // console.log(data.results)\n            this.setState({alldata:data.results})\n        })\n        .catch(err=>console.log(err))\n    }\n\n\n    render() {\n        console.log(this.state.alldata)\n\n          let alldatum = this.state.alldata.map(datum=>{\n              return (\n                  <div className=\"main-section\">\n                    <h1>Coronavirus Cases:</h1>\n                    <p> {datum.total_cases}</p>\n                \n\n                    <h1>Deaths</h1>\n                    <p>{datum.total_deaths}</p>\n\n                    <h1>Total Recovered</h1>\n                    <p>{datum.total_recovered}</p>\n                    <h1>Total Active Cases</h1>\n                    <p>{datum.total_active_cases}</p>\n                    <h1>Total Affected Countries</h1>\n                    <p>{datum.total_affected_countries}</p>\n\n                    <h3>\n                      <Link to={`/detail`} btn-primary>View By Country</Link>\n                    </h3>\n                  </div>\n              )\n          })\n\n         \n\n        return (\n            <div>\n              {alldatum}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\n// import {myContext} from './Context'\nimport ContextPro from './Context'\nimport Home from './components/Home'\nimport Detail from './components/Detail'\nimport AllCountry from './components/AllCountry'\nimport {BrowserRouter as Router,Link,Switch,Route} from 'react-router-dom'\n\n\nclass App extends Component{\n\nrender(){\n  return(\n    <ContextPro>\n\n      <Router>\n\n          <Route exact path=\"/\" component={AllCountry}/>\n          <Route exact path=\"/detail\" component={Home}/>\n\n          <Route exact path=\"/detail/:code\" component={Detail}/>\n\n         \n         \n    \n      </Router>\n      \n    </ContextPro>\n  )\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}